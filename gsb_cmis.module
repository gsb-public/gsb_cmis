<?php

/**
 * @file
 * Contains hook implementations and helper functions for GSB CMSI Test
 */

/**
 * Implements hook_menu().
 */
function gsb_cmis_menu() {
  $items = array();
  $items['gsb-cmis/%gsb_cmis_content_type_import/%'] = array(
    'title' => 'GSB CMIS Content Type Import',
    'description' => 'GSB CMIS Content Type Import.',
    'page callback' => 'gsb_cmis_content_type_import',
    'page arguments' => array(1,2),
    'access arguments' => array(1),
    'access callback' => 'gsb_cmis_content_type_import_access',
  );
  return $items;
}

function gsb_cmis_content_type_import_access($content_type) {
  $token_key = variable_get('gsb_cmis_content_type_import_token', '');
  if (!empty($_GET['token']) && !empty($token_key) && $_GET['token'] == $token_key) {
    return TRUE;
  }
  return FALSE;
}

function gsb_cmis_content_type_import_load($content_type) {
  $content_type = str_replace("working-paper", "working_paper", $content_type);
  if ($content_type != 'case' && $content_type != 'working_paper') {
    return FALSE;
  }
  $info = module_invoke_all('gsb_cmis_content_type_import_info');
  return $info[$content_type];
}

function gsb_cmis_content_type_import($process_info, $uuid) {

  $doc = gsb_cmis_api_getDocumentObject('default', $uuid);
  $process_info['callback']($doc, $uuid);
  return 'gsb_cmis_content_type_import complete';
  
}

function gsb_cmis_content_type_initial_import($content_type, $uuid) {

  if ($content_type != 'case' && $content_type != 'working_paper') {
    return FALSE;
  }

  $info = module_invoke_all('gsb_cmis_content_type_import_info');

  // get top-level folder documents

  $start_time = time_mark();
  $docs = gsb_cmis_api_getTopLevelFolders('default', $uuid);
  drush_log(dt('top level count of docs = '. count($docs)), 'success');
  time_message('time = ', $start_time, time_mark());

  foreach ($docs as $doc) {
    drush_log(dt('top-level folder uuid = '.$doc->uuid), 'success');
    $doc_ids[] = $doc->uuid;
  }  

  // get top-level non folder documents

  drush_log(dt('-------------------------------'), 'success');  

  $start_time = time_mark();
  $other_subdocs = _gsb_cmis_api_getTopLevelObjects('default', $uuid);
  drush_log(dt('additional top-level docs count = '.count($other_subdocs)), 'success');
  time_message('additional top-level docs - time = ', $start_time, time_mark());
  drush_log(dt('-------------------------------'), 'success');  

  foreach ($other_subdocs as $doc) {
    drush_log(dt('top-level non folder uuid = '.$doc->uuid), 'success');
  }    

  // process top-level folder documents

  drush_log(dt('-------------------------------'), 'success');

  foreach ($doc_ids as $doc_id) {

    drush_log(dt('processing uuid = '.$doc_id), 'success');     

    $start_time = time_mark();
    $sub_docs = gsb_cmis_api_getDocuments('default', $doc_id);
    drush_log(dt('count of sub docs = '. count($sub_docs)), 'success');
    time_message('time = ', $start_time, time_mark());
    drush_log(dt('-------------------------------'), 'success');

    $start_time = time_mark();
    foreach ($sub_docs as $sub_doc) {
      $info[$content_type]['callback']($sub_doc, $sub_doc->uuid);
    }
    time_message('created nodes - time = ', $start_time, time_mark());
    drush_log(dt('-------------------------------'), 'success');

  }

  // process top-level non folder documents

  $start_time = time_mark();
  foreach ($other_subdocs as $sub_doc) {
    drush_log(dt('processing non folder uuid = '.$sub_doc->uuid), 'success');    
    $info[$content_type]['callback']($sub_doc, $sub_doc->uuid);
  }
  time_message('created nodes - time = ', $start_time, time_mark());
  drush_log(dt('-------------------------------'), 'success');

}

function time_mark() {

  $time = microtime();
  $time = explode(' ', $time);
  $time = $time[1] + $time[0];

  $start = $time; 

  return $start;
}

function time_message($message, $start_time, $end_time) {
  $total_time = round(($end_time - $start_time), 4);
  drush_log(dt($message.$total_time), 'success');
}

function gsb_cmis_log($message, $type = 'notice', $error = null) {

  if (function_exists('drush_log')) {
    drush_log($message, $type, $error);
  } 
  elseif (function_exists('dpm')) {
    dpm($message);
  }

}  
