<?php

/**
 * @file
 * Contains hook implementations and helper functions for GSB CMSI Test
 */

/**
 * Implements hook_menu().
 */
function gsb_cmis_menu() {
  $items = array();
  $items['gsb-cmis/%gsb_cmis_content_type_import/%'] = array(
    'title' => 'GSB CMIS Content Type Import',
    'description' => 'GSB CMIS Content Type Import.',
    'page callback' => 'gsb_cmis_content_type_import',
    'page arguments' => array(1,2),
    'access arguments' => array(1),
    'access callback' => 'gsb_cmis_content_type_import_access',
  );
  $items['gsb-cmis/gsb-cmis-get-alfresco-doc/%node'] = array(
    'title' => 'Downloading document...',
    'description' => 'Downloading document...',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_cmis_get_alfresco_doc',2),
    'access callback' => TRUE,
  );
  $items['gsb-cmis/gsb-cmis-download-doc/%node'] = array(
    'title' => 'GSB CMIS Download Document',
    'description' => 'GSB CMIS Download Document',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_cmis_download_doc',2),    
    'access callback' => TRUE,
  );    
  return $items;
}

function gsb_cmis_content_type_import_access($content_type) {
  $token_key = variable_get('gsb_cmis_content_type_import_token', '');
  if (!empty($_GET['token']) && !empty($token_key) && $_GET['token'] == $token_key) {
    return TRUE;
  }
  return FALSE;
}

function gsb_cmis_content_type_import_load($content_type) {
  $content_type = str_replace("working-paper", "working_paper", $content_type);
  if ($content_type != 'case' && $content_type != 'working_paper') {
    return FALSE;
  }
  $info = module_invoke_all('gsb_cmis_content_type_import_info');
  return $info[$content_type];
}

function gsb_cmis_content_type_import($process_info, $uuid) {
  $doc = gsb_cmis_api_getDocumentObject('default', $uuid);
  $process_info['callback']($doc, $uuid);
  return 'gsb_cmis_content_type_import complete';
}

function gsb_cmis_content_type_initial_import($content_type, $uuid) {

  if ($content_type != 'case' && $content_type != 'working_paper') {
    return FALSE;
  }

  $info = module_invoke_all('gsb_cmis_content_type_import_info');

  // get top-level folder documents

  $start_time = time_mark();
  $docs = gsb_cmis_api_getTopLevelFolders('default', $uuid);
  drush_log(dt('top level count of docs = '. count($docs)), 'success');
  time_message('time = ', $start_time, time_mark());

  foreach ($docs as $doc) {
    drush_log(dt('top-level folder uuid = '.$doc->uuid), 'success');
    $doc_ids[] = $doc->uuid;
  }  

  // get top-level non folder documents

  drush_log(dt('-------------------------------'), 'success');  

  $start_time = time_mark();
  $other_subdocs = _gsb_cmis_api_getTopLevelObjects('default', $uuid);
  drush_log(dt('additional top-level docs count = '.count($other_subdocs)), 'success');
  time_message('additional top-level docs - time = ', $start_time, time_mark());
  drush_log(dt('-------------------------------'), 'success');  

  foreach ($other_subdocs as $doc) {
    drush_log(dt('top-level non folder uuid = '.$doc->uuid), 'success');
  }    

  // process top-level folder documents

  drush_log(dt('-------------------------------'), 'success');

  foreach ($doc_ids as $doc_id) {

    drush_log(dt('processing uuid = '.$doc_id), 'success');     

    $start_time = time_mark();
    $sub_docs = gsb_cmis_api_getDocuments('default', $doc_id);
    drush_log(dt('count of sub docs = '. count($sub_docs)), 'success');
    time_message('time = ', $start_time, time_mark());
    drush_log(dt('-------------------------------'), 'success');

    $start_time = time_mark();
    foreach ($sub_docs as $sub_doc) {
      $info[$content_type]['callback']($sub_doc, $sub_doc->uuid);
    }
    time_message('created nodes - time = ', $start_time, time_mark());
    drush_log(dt('-------------------------------'), 'success');

  }

  // process top-level non folder documents

  $start_time = time_mark();
  foreach ($other_subdocs as $sub_doc) {
    drush_log(dt('processing non folder uuid = '.$sub_doc->uuid), 'success');    
    $info[$content_type]['callback']($sub_doc, $sub_doc->uuid);
  }
  time_message('created nodes - time = ', $start_time, time_mark());
  drush_log(dt('-------------------------------'), 'success');

}

function time_mark() {
  $time = microtime();
  $time = explode(' ', $time);
  $time = $time[1] + $time[0];
  return $time;
}

function time_message($message, $start_time, $end_time) {
  $total_time = round(($end_time - $start_time), 4);
  drush_log(dt($message.$total_time), 'success');
}

function gsb_cmis_log($message, $type = 'notice', $error = null) {
  if (function_exists('drush_log')) {
    drush_log(dt($message), $type, $error);
  } 
  elseif (function_exists('dpm')) {
    dpm($message);
  }
}  

/**
 * Streams doc from Alfresco
 */
function gsb_cmis_get_alfresco_doc($form, $form_state, $node) {
  module_load_include('api.inc', 'cmis');

  if ($node == null) {
    return;
  }

  $language = $node->language;

  if ($node->type == 'case' && !gsb_cmis_check_simplesaml_auth($node)) {
    return;
  }

  $uuid = $node->field_document_uuid[$language][0]['value'];

  // get the repository and object

  $repository_name = 'default';
  $repository = cmis_get_repository($repository_name);

  try {
    // get the object with the given uuid
    $object = gsb_cmis_api_getDocumentObject($repository_name, $uuid);
    // stream the doc
    $content = cmisapi_getContentStream($repository->repositoryId, $object->id);
  }
  catch (CMISException $e) {
    $object_not_found = strstr($e->getMessage(),'Unable to find object workspace:');
    if (!empty($object_not_found)) {
      $product_type = '';
      if (!empty($node->field_product_type[$language][0])) {
        $product_type = $node->field_product_type[$language][0]['value'];
      }
      drupal_set_message('Error - Unable to find ' . $product_type . ' document: ' . '"' . $node->title . '"', 'error');
    } else {
      cmis_error_handler('cmis_browser_content_get', $e);
    }
    return;
  }
  
  if (ob_get_level()) {
    ob_end_clean();
  }

  drupal_add_http_header('Cache-Control', 'no-cache, must-revalidate');
  drupal_add_http_header('Content-type', $object->properties['cmis:contentStreamMimeType']);
  if ($object->properties['cmis:contentStreamMimeType'] != 'text/html') {
    drupal_add_http_header('Content-Disposition', 'attachment; filename="'. $object->properties['cmis:name'] .'"');  
  }
  
  // download the doc
  print($content);

  exit();
}  

function gsb_cmis_download_doc($form, $form_state, $node = null) {

  if ($node == null) {
    return;
  }

  $language = $node->language;

  if ($node->type == 'case' && !gsb_cmis_check_simplesaml_auth($node)) {
    $form['stuff'] = array(
      '#type' => 'markup',
      '#markup' => 
        '<div class="left"><h2 class="page-title">Downloading document...</h2></div>' .
        '<div class="error-wrapper not-found">' .
          '<p>&nbsp;</p>' . 
          '<p class="larger-text">Access for the document requested, <i>"' . $node->title . '"</i>, is available to the GSB community only.</p>' .
          '<p class="larger-text close-window"><a href="" class="active">Close window</a></p>' .
        '</div>',
    );
  } else {
    $form['stuff'] = array(
      '#type' => 'markup',
      '#markup' => 
        '<div class="left"><h2 class="page-title">Downloading document...</h2></div>' .
        '<div class="error-wrapper not-found">' .
          '<p>&nbsp;</p>' . 
          '<p class="larger-text">The document requested <i>"' . $node->title . '"</i> should download momentarily.</p>' .
          '<p class="larger-text">Please close this window when it is complete.</p>' .
          '<p class="larger-text close-window"><a href="" class="active">Close window</a></p>' .
        '</div>',
    );
    $form['#attached']['js'][drupal_get_path('module', 'gsb_cmis') . '/js/gsb_cmis.js'] = array('scope' => 'footer');
    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'alfresco_document' => array(
          'nid' => $node->nid,
        ),
      ),
    );      
  }
  
  return $form;
}

/**
 * Check if the node is not a 'free case' and if it isn't then... 
 * Check if the user has gone thru simple saml auth and...
 * has a gsb workgroup.
 */
function gsb_cmis_check_simplesaml_auth($node) {

  watchdog('gsb_cmis', 'gsb_cmis_check_simplesaml_auth - begin');

  $language = $node->language;

  $free_case = false;
  if (!empty($node->field_free_case[$language])) {
    $free_case = $node->field_free_case[$language][0]['value'];    
  }

  if (!$free_case) {
    $simplesaml_auth_object = simplesaml_auth_login_check(FALSE);
    $attributes = $simplesaml_auth_object->getAttributes();
    if (empty($attributes['urn:oid:1.3.6.1.4.1.5923.1.1.1.7'])) {
      watchdog('gsb_cmis', 'attribute has no workgroups');
      return false;
    } else {
      $workgroups = $attributes['urn:oid:1.3.6.1.4.1.5923.1.1.1.7'];
      $approved_workgroups = variable_get('gsb_cmis_approved_workgroups', array());
      $has_approved_workgroup = false;
      foreach ($approved_workgroups as $awg) {
        if (in_array($awg, $workgroups)) {
          $has_approved_workgroup = true;
          break;
        }        
      }
      if (!$has_approved_workgroup) {
        watchdog('gsb_cmis', 'attribute has no workgroups');
        return false;
      }
    }
  }

  watchdog('gsb_cmis', 'gsb_cmis_check_simplesaml_auth - end');

  return true;
}  

/**
 * Implements hook_field_extra_fields().
 */
function gsb_cmis_field_extra_fields() {
  $extra = array();
  foreach(array('case','working_paper') as $node_type) {
    $extra['node'][$node_type]['display']['gsb_cmis_download_button'] = array(
      'label' => t('GSB CMIS Download Button'),
      'description' => t('The GSB CMIS download button'),
      'weight' => 0,
    );
  }
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function gsb_cmis_node_view($node, $view_mode, $langcode) {
  // If this field is not configured for this view mode, skip it.
  $fields = field_extra_fields_get_display('node', $node->type, $view_mode);
  if (empty($fields['gsb_cmis_download_button']['visible'])) {
    return;
  }
  // if the node is 'Case' and 'Paper Copy' is set to 'Yes' or...
  // if the node is 'Working Paper' and 'Has PDF' is checked then...
  // add the download button to the display
  if ($node->type == 'case' && !empty($node->field_paper_copy['und'][0]) && $node->field_paper_copy['und'][0]['value'] == 'Yes' || 
      $node->type == 'working_paper' && !empty($node->field_has_pdf['und'][0]['value'])) {
    $node->content['gsb_cmis_download_button'] = array(
      '#markup' => '<div class="gsb-cmis-download-wrapper">' . '<a href="' . base_path() . 'gsb-cmis/gsb-cmis-download-doc/' . $node->nid . '" class="gsb-cmis-download-button" target="_blank">' . t('Download') . '</a>' . '</div>',
    );
  }
}
