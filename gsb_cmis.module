<?php

/**
 * @file
 * Contains hook implementations and helper functions for GSB CMSI Test
 */

/**
 * Implements hook_menu().
 */
function gsb_cmis_menu() {
  $items = array();
  $items['gsb-cmis/%gsb_cmis_content_type_import/%'] = array(
    'title' => 'GSB CMIS Content Type Import',
    'description' => 'GSB CMIS Content Type Import.',
    'page callback' => 'gsb_cmis_content_type_import',
    'page arguments' => array(1,2),
    'access arguments' => array(1),
    'access callback' => 'gsb_cmis_content_type_import_access',
  );
  $items['gsb-cmis/gsb-cmis-get-alfresco-doc/%'] = array(
    'title' => 'GSB CMIS Get Alfresco Document',
    'description' => 'GSB CMIS Get Alfresco Document',
    'page callback' => 'gsb_cmis_get_alfresco_doc',
    'page arguments' => array(2),
    'access arguments' => array(1),
    'access callback' => TRUE,
  );
  $items['gsb-cmis/gsb-cmis-download-doc/%node'] = array(
    'title' => 'GSB CMIS Download Document',
    'description' => 'GSB CMIS Download Document',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_cmis_download_doc',2),    
    'access callback' => TRUE,
  );    
  return $items;
}

function gsb_cmis_content_type_import_access($content_type) {
  $token_key = variable_get('gsb_cmis_content_type_import_token', '');
  if (!empty($_GET['token']) && !empty($token_key) && $_GET['token'] == $token_key) {
    return TRUE;
  }
  return FALSE;
}

function gsb_cmis_content_type_import_load($content_type) {
  $content_type = str_replace("working-paper", "working_paper", $content_type);
  if ($content_type != 'case' && $content_type != 'working_paper') {
    return FALSE;
  }
  $info = module_invoke_all('gsb_cmis_content_type_import_info');
  return $info[$content_type];
}

function gsb_cmis_content_type_import($process_info, $uuid) {
  $doc = gsb_cmis_api_getDocumentObject('default', $uuid);
  $process_info['callback']($doc, $uuid);
  return 'gsb_cmis_content_type_import complete';
}

function gsb_cmis_content_type_initial_import($content_type, $uuid) {

  if ($content_type != 'case' && $content_type != 'working_paper') {
    return FALSE;
  }

  $info = module_invoke_all('gsb_cmis_content_type_import_info');

  // get top-level folder documents

  $start_time = time_mark();
  $docs = gsb_cmis_api_getTopLevelFolders('default', $uuid);
  drush_log(dt('top level count of docs = '. count($docs)), 'success');
  time_message('time = ', $start_time, time_mark());

  foreach ($docs as $doc) {
    drush_log(dt('top-level folder uuid = '.$doc->uuid), 'success');
    $doc_ids[] = $doc->uuid;
  }  

  // get top-level non folder documents

  drush_log(dt('-------------------------------'), 'success');  

  $start_time = time_mark();
  $other_subdocs = _gsb_cmis_api_getTopLevelObjects('default', $uuid);
  drush_log(dt('additional top-level docs count = '.count($other_subdocs)), 'success');
  time_message('additional top-level docs - time = ', $start_time, time_mark());
  drush_log(dt('-------------------------------'), 'success');  

  foreach ($other_subdocs as $doc) {
    drush_log(dt('top-level non folder uuid = '.$doc->uuid), 'success');
  }    

  // process top-level folder documents

  drush_log(dt('-------------------------------'), 'success');

  foreach ($doc_ids as $doc_id) {

    drush_log(dt('processing uuid = '.$doc_id), 'success');     

    $start_time = time_mark();
    $sub_docs = gsb_cmis_api_getDocuments('default', $doc_id);
    drush_log(dt('count of sub docs = '. count($sub_docs)), 'success');
    time_message('time = ', $start_time, time_mark());
    drush_log(dt('-------------------------------'), 'success');

    $start_time = time_mark();
    foreach ($sub_docs as $sub_doc) {
      $info[$content_type]['callback']($sub_doc, $sub_doc->uuid);
    }
    time_message('created nodes - time = ', $start_time, time_mark());
    drush_log(dt('-------------------------------'), 'success');

  }

  // process top-level non folder documents

  $start_time = time_mark();
  foreach ($other_subdocs as $sub_doc) {
    drush_log(dt('processing non folder uuid = '.$sub_doc->uuid), 'success');    
    $info[$content_type]['callback']($sub_doc, $sub_doc->uuid);
  }
  time_message('created nodes - time = ', $start_time, time_mark());
  drush_log(dt('-------------------------------'), 'success');

}

function time_mark() {
  $time = microtime();
  $time = explode(' ', $time);
  $time = $time[1] + $time[0];
  return $time;
}

function time_message($message, $start_time, $end_time) {
  $total_time = round(($end_time - $start_time), 4);
  drush_log(dt($message.$total_time), 'success');
}

function gsb_cmis_log($message, $type = 'notice', $error = null) {
  if (function_exists('drush_log')) {
    drush_log(dt($message), $type, $error);
  } 
  elseif (function_exists('dpm')) {
    dpm($message);
  }
}  

/**
 * Streams doc from Alfresco
 */
function gsb_cmis_get_alfresco_doc($uuid) {
  module_load_include('api.inc', 'cmis');

  // get the repository and object

  $repository_name = 'default';
  $repository = cmis_get_repository($repository_name);

  $object = gsb_cmis_api_getDocumentObject($repository_name, $uuid); 
  
  try {
    // stream the doc
    $content = cmisapi_getContentStream($repository->repositoryId, $object->id);
  }
  catch (CMISException $e) {
    cmis_error_handler('cmis_browser_content_get', $e);
    drupal_add_http_header('', 'HTTP/1.1 503 Service unavailable');
    exit();
  }
  
  if (ob_get_level()) {
    ob_end_clean();
  }

  drupal_add_http_header('Cache-Control', 'no-cache, must-revalidate');
  drupal_add_http_header('Content-type', $object->properties['cmis:contentStreamMimeType']);
  if ($object->properties['cmis:contentStreamMimeType'] != 'text/html') {
    drupal_add_http_header('Content-Disposition', 'attachment; filename="'. $object->properties['cmis:name'] .'"');  
  }
  
  // download the doc
  print($content);

  exit();
}  

function gsb_cmis_download_doc($form, $form_state, $node = null) {
  watchdog('cmis testing', 'in gsb_cmis_download_doc');

  if ($node == null) {
    return;
  }

  $language = $node->language;

  $free_case = false;
  if (!empty($node->field_free_case[$language])) {
    $free_case = $node->field_free_case[$language][0]['value'];    
  }

  if (!$free_case) {
    gsb_cmis_check_simplesaml_auth();
  }

  $uuid = $node->field_document_uuid[$language][0]['value'];

  $form['stuff'] = array(
    '#type' => 'markup',
    '#markup' => 'Downloading document...',
  );

  $form['#attached']['js'][] = drupal_get_path('module', 'gsb_cmis') . '/js/gsb_cmis.js';
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'alfresco_document' => array(
        'uuid' => $uuid,
      ),
    ),
  );  

  return $form;
}

/**
 * Check if the user has gone thru simple saml auth
 */
function gsb_cmis_check_simplesaml_auth() {
  watchdog('cmis testing', 'in gsb_cmis_check_simplesaml_auth');

  global $user;
  global $_simplesaml_auth_object;

  if ($user->uid) {
    //Don't Login  because we already are
    return;
  }

  $basedir = variable_get('simplesaml_auth_installdir', '/var/simplesamlphp');
  $basedir = token_replace($basedir);

  $autoload_path = $basedir . '/lib/_autoload.php';
  if (!file_exists($autoload_path)) {
    watchdog('simplesaml_auth', 'Cannot find simplesaml at @basedir', array('@basedir' => $basedir));
    return;
  }
  require_once($autoload_path);

  // Initialize simplesamlphp.
  $authsource = variable_get('simplesamlphp_auth_authsource', 'default-sp');

  // Load simpleSAMLphp, configuration and metadata.
  $_simplesaml_auth_object = new SimpleSAML_Auth_Simple($authsource);

  // We're going to try simplesaml auth test
  $options = array(
    'ReturnTo' => $GLOBALS['base_url'] . '/' . request_path(),
  );
  $_simplesaml_auth_object->requireAuth($options);

  $attributes = $_simplesaml_auth_object->getAttributes();

  return; 
}

